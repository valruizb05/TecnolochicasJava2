import java.util.concurrent.*;
import java.util.concurrent.locks.ReentrantLock;

// Recurso m√©dico con sincronizaci√≥n
class RecursoMedico {
    private final String nombre;
    private final ReentrantLock lock = new ReentrantLock();

    public RecursoMedico(String nombre) {
        this.nombre = nombre;
    }

    public void usar(String profesional) {
        System.out.println("üîÑ " + profesional + " est√° intentando acceder a " + nombre + "...");
        lock.lock(); // Adquiere el bloqueo
        try {
            System.out.println("üë©‚Äç‚öïÔ∏è " + profesional + " ha ingresado a " + nombre);
            Thread.sleep(1000); // Simula uso del recurso
            System.out.println("‚úÖ " + profesional + " ha salido de " + nombre);
        } catch (InterruptedException e) {
            System.out.println("‚ö†Ô∏è " + profesional + " fue interrumpido.");
        } finally {
            lock.unlock(); // Libera el bloqueo
        }
    }
}

public class SimulacionHospital {

    public static void main(String[] args) {
        System.out.println("üè• Iniciando acceso a la Sala de cirug√≠a...");

        RecursoMedico salaCirugia = new RecursoMedico("Sala de cirug√≠a");

        // Lista de profesionales m√©dicos
        String[] profesionales = {
            "Dra. S√°nchez",
            "Dr. G√≥mez",
            "Enf. Ram√≠rez",
            "Dra. Torres",
            "Dr. P√©rez"
        };

        // ExecutorService para concurrencia
        ExecutorService executor = Executors.newFixedThreadPool(4);

        for (String profesional : profesionales) {
            executor.execute(() -> salaCirugia.usar(profesional));
        }

        executor.shutdown(); // No se aceptan m√°s tareas
    }
}
